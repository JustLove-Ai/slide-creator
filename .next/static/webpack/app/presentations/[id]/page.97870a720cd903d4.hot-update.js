"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/presentations/[id]/page",{

/***/ "(app-pages-browser)/./src/lib/actions.ts":
/*!****************************!*\
  !*** ./src/lib/actions.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyThemeToAllSlides: () => (/* binding */ applyThemeToAllSlides),\n/* harmony export */   createDefaultVoiceProfiles: () => (/* binding */ createDefaultVoiceProfiles),\n/* harmony export */   createFramework: () => (/* binding */ createFramework),\n/* harmony export */   createFrameworkTemplates: () => (/* binding */ createFrameworkTemplates),\n/* harmony export */   createOutline: () => (/* binding */ createOutline),\n/* harmony export */   createPresentation: () => (/* binding */ createPresentation),\n/* harmony export */   createSlide: () => (/* binding */ createSlide),\n/* harmony export */   createVoiceProfile: () => (/* binding */ createVoiceProfile),\n/* harmony export */   deleteFramework: () => (/* binding */ deleteFramework),\n/* harmony export */   deletePresentation: () => (/* binding */ deletePresentation),\n/* harmony export */   deleteSlide: () => (/* binding */ deleteSlide),\n/* harmony export */   deleteVoiceProfile: () => (/* binding */ deleteVoiceProfile),\n/* harmony export */   duplicateFramework: () => (/* binding */ duplicateFramework),\n/* harmony export */   duplicateSlide: () => (/* binding */ duplicateSlide),\n/* harmony export */   generateOutlinePreview: () => (/* binding */ generateOutlinePreview),\n/* harmony export */   generatePresentationFromOutline: () => (/* binding */ generatePresentationFromOutline),\n/* harmony export */   getFrameworkTemplates: () => (/* binding */ getFrameworkTemplates),\n/* harmony export */   getFrameworks: () => (/* binding */ getFrameworks),\n/* harmony export */   getPresentation: () => (/* binding */ getPresentation),\n/* harmony export */   getPresentations: () => (/* binding */ getPresentations),\n/* harmony export */   getVoiceProfiles: () => (/* binding */ getVoiceProfiles),\n/* harmony export */   regenerateSlide: () => (/* binding */ regenerateSlide),\n/* harmony export */   reorderSlides: () => (/* binding */ reorderSlides),\n/* harmony export */   seedDefaultData: () => (/* binding */ seedDefaultData),\n/* harmony export */   updateFramework: () => (/* binding */ updateFramework),\n/* harmony export */   updatePresentation: () => (/* binding */ updatePresentation),\n/* harmony export */   updateSlide: () => (/* binding */ updateSlide),\n/* harmony export */   updateVoiceProfile: () => (/* binding */ updateVoiceProfile)\n/* harmony export */ });\n/* harmony import */ var private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! private-next-rsc-action-client-wrapper */ \"(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js\");\n/* harmony import */ var private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_action_entry_do_not_use__ {\"005d8bb34d2eadde5cf5e8e1de63a966396844e96c\":\"createDefaultVoiceProfiles\",\"006e755835a28c3b14ab3f9faffbccf4c348647da9\":\"createFrameworkTemplates\",\"006eba94d0e12cc93f59d8bdbe1850deca2868a7f5\":\"getFrameworkTemplates\",\"0086ae3b9f5bc19cf18abe18312088de27fd48b808\":\"getFrameworks\",\"00b3faa13461c82d2ec76bc8c558f0631ebd30dd97\":\"getPresentations\",\"00e2a41f8fb0e35aec49aa94b7362a561d9bb20220\":\"seedDefaultData\",\"00fbfc0efea2677e6cc5d1723af5bfb23232b259d3\":\"getVoiceProfiles\",\"4013854f7a9927462bc53f2ca1efe6d837487a7624\":\"duplicateSlide\",\"401a573bf12442a85613c6156a07357eb2b5953414\":\"generateOutlinePreview\",\"401dfe575b699b16e551c54d4a98affa6619ee2fca\":\"createFramework\",\"404855b77cd2ff19bbe9919ddddee85da6b72d4dbe\":\"deletePresentation\",\"4075c4e2c06044632ec8841fdbe44776c2ff4dfc62\":\"updatePresentation\",\"407b9a32f8d60a17ef98de44a992117704365524e0\":\"updateSlide\",\"408a6a933fc053a5bdb1838d62cb1dfb987b0fe11d\":\"createOutline\",\"408a882a4b662c065eabe31eab0bb7d7fb29a60697\":\"createPresentation\",\"408c13c59a655573b1915de9e3d87318968c7158f2\":\"deleteVoiceProfile\",\"409432929ca4cdafeea9f4174c0afab18435b63f4a\":\"deleteSlide\",\"409d0493f3f399c508fa8cf14e64147b5078ad8d2e\":\"generatePresentationFromOutline\",\"40a38b90cb852b1c7a4e61af33505695103c59c08a\":\"getPresentation\",\"40a6721bd7c52c2c43d6f626dea4c69e25948bbca3\":\"duplicateFramework\",\"40a8961ab8307dadaa43a19e33aa2659b42fecb74d\":\"createSlide\",\"40d598df8e6eaac9e3fbbabce7b885ee6aedb0c576\":\"createVoiceProfile\",\"40e71cf531d5257fcf4034963cce8eb4998ee82397\":\"deleteFramework\",\"604a0a935a217d1e6be37138abc728f41e7217bfff\":\"applyThemeToAllSlides\",\"60659897f7a5aafe5b0ab9a9745e3a4a299a9b653b\":\"regenerateSlide\",\"606d0b90df52b37c2e17d2c7aa1aebf93e621c34ce\":\"updateVoiceProfile\",\"6075daa99451728b17b467f30c8ca939c1fad6648e\":\"reorderSlides\",\"60b0bfd1eddef3b8188c74b92664951da6cab05830\":\"updateFramework\"} */ \nvar createSlide = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40a8961ab8307dadaa43a19e33aa2659b42fecb74d\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"createSlide\");\nvar updateSlide = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"407b9a32f8d60a17ef98de44a992117704365524e0\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"updateSlide\");\nvar duplicateSlide = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4013854f7a9927462bc53f2ca1efe6d837487a7624\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"duplicateSlide\");\nvar deleteSlide = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"409432929ca4cdafeea9f4174c0afab18435b63f4a\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"deleteSlide\");\nvar updatePresentation = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4075c4e2c06044632ec8841fdbe44776c2ff4dfc62\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"updatePresentation\");\nvar applyThemeToAllSlides = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"604a0a935a217d1e6be37138abc728f41e7217bfff\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"applyThemeToAllSlides\");\nvar reorderSlides = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"6075daa99451728b17b467f30c8ca939c1fad6648e\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"reorderSlides\");\nvar getVoiceProfiles = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"00fbfc0efea2677e6cc5d1723af5bfb23232b259d3\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getVoiceProfiles\");\nvar createFrameworkTemplates = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"006e755835a28c3b14ab3f9faffbccf4c348647da9\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"createFrameworkTemplates\");\nvar getFrameworkTemplates = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"006eba94d0e12cc93f59d8bdbe1850deca2868a7f5\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getFrameworkTemplates\");\nvar createDefaultVoiceProfiles = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"005d8bb34d2eadde5cf5e8e1de63a966396844e96c\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"createDefaultVoiceProfiles\");\nvar seedDefaultData = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"00e2a41f8fb0e35aec49aa94b7362a561d9bb20220\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"seedDefaultData\");\nvar deletePresentation = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"404855b77cd2ff19bbe9919ddddee85da6b72d4dbe\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"deletePresentation\");\nvar createVoiceProfile = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40d598df8e6eaac9e3fbbabce7b885ee6aedb0c576\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"createVoiceProfile\");\nvar updateVoiceProfile = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"606d0b90df52b37c2e17d2c7aa1aebf93e621c34ce\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"updateVoiceProfile\");\nvar deleteVoiceProfile = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"408c13c59a655573b1915de9e3d87318968c7158f2\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"deleteVoiceProfile\");\nvar getFrameworks = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"0086ae3b9f5bc19cf18abe18312088de27fd48b808\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getFrameworks\");\nvar createFramework = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"401dfe575b699b16e551c54d4a98affa6619ee2fca\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"createFramework\");\nvar updateFramework = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"60b0bfd1eddef3b8188c74b92664951da6cab05830\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"updateFramework\");\nvar deleteFramework = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40e71cf531d5257fcf4034963cce8eb4998ee82397\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"deleteFramework\");\nvar duplicateFramework = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40a6721bd7c52c2c43d6f626dea4c69e25948bbca3\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"duplicateFramework\");\nvar createPresentation = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"408a882a4b662c065eabe31eab0bb7d7fb29a60697\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"createPresentation\");\nvar createOutline = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"408a6a933fc053a5bdb1838d62cb1dfb987b0fe11d\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"createOutline\");\nvar generateOutlinePreview = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"401a573bf12442a85613c6156a07357eb2b5953414\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"generateOutlinePreview\");\nvar generatePresentationFromOutline = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"409d0493f3f399c508fa8cf14e64147b5078ad8d2e\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"generatePresentationFromOutline\");\nvar getPresentations = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"00b3faa13461c82d2ec76bc8c558f0631ebd30dd97\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getPresentations\");\nvar getPresentation = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40a38b90cb852b1c7a4e61af33505695103c59c08a\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getPresentation\");\nvar regenerateSlide = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"60659897f7a5aafe5b0ab9a9745e3a4a299a9b653b\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"regenerateSlide\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/actions.ts\n"));

/***/ })

});
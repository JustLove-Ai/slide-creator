"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_action-browser_src_lib_ai-service_ts";
exports.ids = ["_action-browser_src_lib_ai-service_ts"];
exports.modules = {

/***/ "(action-browser)/./src/lib/ai-service.ts":
/*!*******************************!*\
  !*** ./src/lib/ai-service.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateSlideContent: () => (/* binding */ generateSlideContent),\n/* harmony export */   regenerateSlideContent: () => (/* binding */ regenerateSlideContent)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(action-browser)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _prompts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./prompts */ \"(action-browser)/./src/lib/prompts.ts\");\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nasync function generateSlideContent(prompt, presentationTitle, voiceProfile, framework) {\n    try {\n        // Build voice context from structured voice profile\n        const voiceContext = (0,_prompts__WEBPACK_IMPORTED_MODULE_1__.buildVoiceContextPrompt)(voiceProfile);\n        // Build framework context if provided\n        const frameworkContext = (0,_prompts__WEBPACK_IMPORTED_MODULE_1__.buildFrameworkPrompt)(framework);\n        // Construct the final prompt\n        const finalPrompt = _prompts__WEBPACK_IMPORTED_MODULE_1__.SLIDE_GENERATION_PROMPT.replace('{topic}', prompt).replace('{title}', presentationTitle).replace('{voiceContext}', voiceContext).replace('{frameworkContext}', frameworkContext);\n        // Call OpenAI API\n        const completion = await openai.chat.completions.create({\n            model: 'gpt-4o-mini',\n            messages: [\n                {\n                    role: 'system',\n                    content: _prompts__WEBPACK_IMPORTED_MODULE_1__.SYSTEM_PROMPT\n                },\n                {\n                    role: 'user',\n                    content: finalPrompt\n                }\n            ],\n            temperature: 0.7,\n            max_tokens: 4000\n        });\n        const responseText = completion.choices[0]?.message?.content;\n        if (!responseText) {\n            throw new Error('No response from OpenAI');\n        }\n        // Parse JSON response - handle both raw JSON and markdown code blocks\n        let slides;\n        try {\n            // Remove markdown code blocks if present\n            let jsonText = responseText;\n            const codeBlockMatch = responseText.match(/```json\\s*\\n?([\\s\\S]*?)\\n?```/);\n            if (codeBlockMatch) {\n                jsonText = codeBlockMatch[1];\n            }\n            slides = JSON.parse(jsonText);\n        } catch (parseError) {\n            console.error('Failed to parse OpenAI response:', responseText);\n            throw new Error('Invalid response format from AI');\n        }\n        // Validate and ensure proper slide structure\n        return validateAndFixSlides(slides);\n    } catch (error) {\n        console.error('Error generating slide content:', error);\n        // Fallback to basic slides if OpenAI fails\n        if (error instanceof Error && error.message.includes('API')) {\n            console.warn('OpenAI API failed, using fallback content');\n            return generateFallbackSlides(prompt, presentationTitle, framework);\n        }\n        throw error;\n    }\n}\nfunction validateAndFixSlides(slides) {\n    return slides.map((slide, index)=>({\n            ...slide,\n            order: slide.order || index + 1,\n            layout: slide.layout || (0,_prompts__WEBPACK_IMPORTED_MODULE_1__.getDefaultLayoutForSlideType)(slide.slideType),\n            slideType: slide.slideType || 'CONTENT'\n        }));\n}\nfunction generateFallbackSlides(prompt, title, framework) {\n    const slides = [\n        {\n            title,\n            content: `# ${title}`,\n            slideType: 'TITLE',\n            layout: 'TITLE_COVER',\n            order: 1\n        },\n        {\n            title: 'Overview',\n            content: `## Overview\\n\\nThis presentation covers key aspects of: ${prompt}\\n\\n### Key Topics\\n- Introduction to main concepts\\n- Detailed analysis\\n- Practical applications\\n- Next steps`,\n            slideType: 'INTRO',\n            layout: 'TEXT_ONLY',\n            order: 2\n        },\n        {\n            title: 'Main Content',\n            content: `## Main Content\\n\\n### Key Points\\n- Important concept 1\\n- Important concept 2\\n- Important concept 3\\n\\n### Details\\nDetailed exploration of ${prompt} and its implications.`,\n            slideType: 'CONTENT',\n            layout: 'TEXT_IMAGE_RIGHT',\n            order: 3\n        },\n        {\n            title: 'Conclusion',\n            content: `## Conclusion\\n\\n### Summary\\nWe have explored the key aspects of ${prompt}.\\n\\n### Key Takeaways\\n- Main insight 1\\n- Main insight 2\\n- Path forward`,\n            slideType: 'CONCLUSION',\n            layout: 'TEXT_ONLY',\n            order: 4\n        }\n    ];\n    return slides;\n}\nasync function regenerateSlideContent(originalSlide, prompt, additionalContext, voiceProfile) {\n    try {\n        // Build voice context\n        const voiceContext = (0,_prompts__WEBPACK_IMPORTED_MODULE_1__.buildVoiceContextPrompt)(voiceProfile);\n        // Construct the regeneration prompt\n        const finalPrompt = _prompts__WEBPACK_IMPORTED_MODULE_1__.SLIDE_REGENERATION_PROMPT.replace('{originalTitle}', originalSlide.title).replace('{originalContent}', originalSlide.content).replace('{slideType}', originalSlide.slideType).replace('{layout}', originalSlide.layout).replace('{topic}', prompt).replace('{additionalContext}', additionalContext || 'None').replace('{voiceContext}', voiceContext).replace('{order}', originalSlide.order.toString());\n        // Call OpenAI API\n        const completion = await openai.chat.completions.create({\n            model: 'gpt-4o-mini',\n            messages: [\n                {\n                    role: 'system',\n                    content: _prompts__WEBPACK_IMPORTED_MODULE_1__.SYSTEM_PROMPT\n                },\n                {\n                    role: 'user',\n                    content: finalPrompt\n                }\n            ],\n            temperature: 0.8,\n            max_tokens: 1500\n        });\n        const responseText = completion.choices[0]?.message?.content;\n        if (!responseText) {\n            throw new Error('No response from OpenAI');\n        }\n        // Parse JSON response\n        let enhancedSlide;\n        try {\n            enhancedSlide = JSON.parse(responseText);\n        } catch (parseError) {\n            console.error('Failed to parse regeneration response:', responseText);\n            throw new Error('Invalid response format from AI');\n        }\n        // Ensure the slide maintains its order and basic structure\n        return {\n            ...enhancedSlide,\n            order: originalSlide.order\n        };\n    } catch (error) {\n        console.error('Error regenerating slide content:', error);\n        // Fallback to enhanced version of original slide\n        return {\n            ...originalSlide,\n            title: `Enhanced: ${originalSlide.title}`,\n            content: originalSlide.content + '\\n\\n*Content enhanced with additional context and improvements.*'\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./src/lib/ai-service.ts\n");

/***/ }),

/***/ "(action-browser)/./src/lib/prompts.ts":
/*!****************************!*\
  !*** ./src/lib/prompts.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTENT_ENHANCEMENT_GUIDELINES: () => (/* binding */ CONTENT_ENHANCEMENT_GUIDELINES),\n/* harmony export */   DEFAULT_SLIDE_LAYOUTS: () => (/* binding */ DEFAULT_SLIDE_LAYOUTS),\n/* harmony export */   SLIDE_GENERATION_PROMPT: () => (/* binding */ SLIDE_GENERATION_PROMPT),\n/* harmony export */   SLIDE_REGENERATION_PROMPT: () => (/* binding */ SLIDE_REGENERATION_PROMPT),\n/* harmony export */   SYSTEM_PROMPT: () => (/* binding */ SYSTEM_PROMPT),\n/* harmony export */   buildFrameworkPrompt: () => (/* binding */ buildFrameworkPrompt),\n/* harmony export */   buildVoiceContextPrompt: () => (/* binding */ buildVoiceContextPrompt),\n/* harmony export */   getDefaultLayoutForSlideType: () => (/* binding */ getDefaultLayoutForSlideType)\n/* harmony export */ });\nconst SYSTEM_PROMPT = `You are a professional presentation creator. Your role is to generate compelling, well-structured presentation content that engages audiences and achieves the presenter's objectives.\n\nKey principles:\n- Create content that is clear, engaging, and actionable\n- Maintain consistent tone and style throughout\n- Structure information logically and persuasively\n- Use appropriate formatting for presentation slides\n- Ensure content is relevant to the intended audience\n- Follow any specific framework requirements exactly`;\nfunction buildVoiceContextPrompt(voiceProfile) {\n    if (!voiceProfile) {\n        return \"Use a professional, clear, and engaging tone suitable for business presentations.\";\n    }\n    let voiceContext = \"VOICE & STYLE CONTEXT:\\n\";\n    if (voiceProfile.tone.length > 0) {\n        voiceContext += `Tone: ${voiceProfile.tone.join(', ')}\\n`;\n    }\n    if (voiceProfile.audience.length > 0) {\n        voiceContext += `Target Audience: ${voiceProfile.audience.join(', ')}\\n`;\n    }\n    if (voiceProfile.objective.length > 0) {\n        voiceContext += `Presentation Objectives: ${voiceProfile.objective.join(', ')}\\n`;\n    }\n    if (voiceProfile.brandVoice.length > 0) {\n        voiceContext += `Brand Voice: ${voiceProfile.brandVoice.join(', ')}\\n`;\n    }\n    if (voiceProfile.contentStyle.length > 0) {\n        voiceContext += `Content Style: ${voiceProfile.contentStyle.join(', ')}\\n`;\n    }\n    if (voiceProfile.restrictions.length > 0) {\n        voiceContext += `Restrictions: ${voiceProfile.restrictions.join(', ')}\\n`;\n    }\n    if (voiceProfile.other.length > 0) {\n        voiceContext += `Additional Instructions: ${voiceProfile.other.join(', ')}\\n`;\n    }\n    return voiceContext;\n}\nfunction buildFrameworkPrompt(framework) {\n    if (!framework || !framework.slides || framework.slides.length === 0) {\n        return \"\";\n    }\n    let frameworkPrompt = `FRAMEWORK REQUIREMENTS:\\n`;\n    frameworkPrompt += `You must create exactly ${framework.slides.length} slides following this specific structure:\\n\\n`;\n    framework.slides.forEach((slide, index)=>{\n        frameworkPrompt += `Slide ${index + 1}: ${slide.title}\\n`;\n        frameworkPrompt += `Type: ${slide.slideType}\\n`;\n        frameworkPrompt += `Layout: ${slide.layout}\\n`;\n        frameworkPrompt += `Instructions: ${slide.instructions}\\n\\n`;\n    });\n    frameworkPrompt += `CRITICAL: Follow the slide order and instructions exactly. Each slide must serve its specific purpose as outlined above.`;\n    return frameworkPrompt;\n}\nconst SLIDE_GENERATION_PROMPT = `Generate presentation slides based on the following requirements:\n\nTOPIC: {topic}\nPRESENTATION TITLE: {title}\n\n{voiceContext}\n\n{frameworkContext}\n\nOUTPUT FORMAT:\nReturn a JSON array of slide objects with this exact structure:\n[\n  {\n    \"title\": \"slide title\",\n    \"content\": \"slide content in markdown format with proper headings and bullet points\",\n    \"slideType\": \"TITLE|INTRO|CONTENT|CONCLUSION|NEXT_STEPS\",\n    \"layout\": \"TEXT_ONLY|TITLE_COVER|TITLE_ONLY|TEXT_IMAGE_LEFT|TEXT_IMAGE_RIGHT|IMAGE_FULL|BULLETS_IMAGE|TWO_COLUMN|IMAGE_BACKGROUND|TIMELINE|QUOTE_LARGE|STATISTICS_GRID|IMAGE_OVERLAY|SPLIT_CONTENT|COMPARISON\",\n    \"order\": 1\n  }\n]\n\nCONTENT REQUIREMENTS:\n- Use markdown formatting (##, ###, -, etc.)\n- Create engaging, actionable content\n- Ensure each slide serves a clear purpose\n- Make content appropriate for the target audience\n- Include specific examples and actionable insights where relevant\n- Keep content concise but comprehensive\n- Use bullet points effectively for key information\n\nTITLE SLIDE REQUIREMENTS:\n- ONLY include the presentation title, nothing else\n- No subtitles, definitions, or additional content\n- Simple format: just \"# Title\" \n- Keep it clean and focused\n\nIMPORTANT: Return ONLY the JSON array, no additional text or explanations.`;\nconst SLIDE_REGENERATION_PROMPT = `Regenerate and enhance the following slide:\n\nORIGINAL SLIDE:\nTitle: {originalTitle}\nContent: {originalContent}\nType: {slideType}\nLayout: {layout}\n\nENHANCEMENT CONTEXT:\nTopic: {topic}\nAdditional Context: {additionalContext}\n\n{voiceContext}\n\nREQUIREMENTS:\n- Significantly improve the content while maintaining the slide's purpose\n- Keep the same slideType and layout unless improvement requires a change\n- Make content more engaging, specific, and actionable\n- Add relevant examples or insights where appropriate\n- Ensure content flows well and serves the presentation's overall narrative\n\nOUTPUT FORMAT:\nReturn a JSON object with this exact structure:\n{\n  \"title\": \"enhanced slide title\",\n  \"content\": \"enhanced slide content in markdown format\",\n  \"slideType\": \"same or improved slide type\",\n  \"layout\": \"same or improved layout\",\n  \"order\": {order}\n}\n\nIMPORTANT: Return ONLY the JSON object, no additional text or explanations.`;\nconst DEFAULT_SLIDE_LAYOUTS = {\n    TITLE: 'TITLE_ONLY',\n    INTRO: 'TEXT_ONLY',\n    CONTENT: 'TEXT_IMAGE_RIGHT',\n    CONCLUSION: 'TEXT_ONLY',\n    NEXT_STEPS: 'BULLETS_IMAGE'\n};\nfunction getDefaultLayoutForSlideType(slideType) {\n    return DEFAULT_SLIDE_LAYOUTS[slideType] || 'TEXT_ONLY';\n}\nconst CONTENT_ENHANCEMENT_GUIDELINES = {\n    title: \"Make titles compelling and specific\",\n    intro: \"Hook the audience immediately and set clear expectations\",\n    content: \"Provide valuable insights with concrete examples and actionable takeaways\",\n    conclusion: \"Summarize key points and reinforce the main message\",\n    nextSteps: \"Provide clear, actionable steps the audience can take immediately\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./src/lib/prompts.ts\n");

/***/ })

};
;